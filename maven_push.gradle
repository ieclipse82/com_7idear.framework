apply plugin: 'maven'

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
    uploadArchives {
        configuration = configurations.archives
        repositories {
            mavenDeployer {
                repository(url: NEXUS_URL) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                    pom.groupId = GROUP_ID
                    pom.artifactId = ARTIFACT_ID
                    pom.version = LIB_VERSION
                }
                pom.whenConfigured { pom ->
                    pom.dependencies.forEach { dep ->
                        if (dep.getVersion() == "unspecified") {
                            println("--modify the dependenies module in pom.xml--->>" + dep
                                    .getArtifactId())
                            dep.setGroupId(GROUP_ID)
                            dep.setVersion(LIB_VERSION)
                        }
                    }
                }
            }
        }
    }

// type显示指定任务类型或任务, 这里指定要执行Javadoc这个task,这个task在gradle中已经定义
    task androidJavadocs(type: Javadoc) {
        // 设置源码所在的位置
        source = android.sourceSets.main.java.sourceFiles
    }

// 生成javadoc.jar
    task androidJavadocsJar(type: Jar) {
        // 指定文档名称
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

// 生成sources.jar
    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

// 产生相关配置文件的任务
    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}
